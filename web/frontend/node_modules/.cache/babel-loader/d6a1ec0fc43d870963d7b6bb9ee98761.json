{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport Form from \"./form\";\nimport Todo from \"./todo\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        axios.patch(`/api/todos/${id}/`, {\n          \"completed\": !task.completed\n        });\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    axios.patch(`/api/todos/${id}/`, {\n      \"name\": newName\n    });\n    setTasks(editedTaskList);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n    axios.delete(`/api/todos/${id}/`, {\n      \"id\": id\n    });\n  }\n\n  tasks.forEach(item => {\n    let p = document.createElement('p');\n    p.innerText = item;\n    document.querySelector('#item-list').appendChild(p);\n  });\n\n  function addTask(name) {\n    const newTask = {\n      id: Date.now(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n    axios.post(\"/api/todos/\", {\n      \"id\": newTask.id,\n      \"name\": newTask.name,\n      \"completed\": newTask.completed\n    });\n  }\n}\n\n_s(App, \"pjFsLTHS1Kjd+NDyC2kZTexpLic=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Documentos/ProgramaciÃ³n/Lenguajes/Python/pingo/web/frontend/src/App.js"],"names":["Form","Todo","React","useState","axios","App","props","tasks","setTasks","toggleTaskCompleted","id","updatedTasks","map","task","patch","completed","editTask","newName","editedTaskList","name","deleteTask","remainingTasks","filter","delete","forEach","item","p","document","createElement","innerText","querySelector","appendChild","addTask","newTask","Date","now","post"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAMA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAGhB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACG,KAAK,CAACC,KAAP,CAAlC;;AAGA,WAASE,mBAAT,CAA6BC,EAA7B,EAAiC;AAC7B,UAAMC,YAAY,GAAGJ,KAAK,CAACK,GAAN,CAAUC,IAAI,IAAI;AACnC;AACA,UAAIH,EAAE,KAAKG,IAAI,CAACH,EAAhB,EAAoB;AAChB;AACA;AACAN,QAAAA,KAAK,CACAU,KADL,CACY,cAAaJ,EAAG,GAD5B,EACgC;AAAC,uBAAa,CAACG,IAAI,CAACE;AAApB,SADhC;AAEA,eAAO,EAAC,GAAGF,IAAJ;AAAUE,UAAAA,SAAS,EAAE,CAACF,IAAI,CAACE;AAA3B,SAAP;AACH;;AACD,aAAOF,IAAP;AACH,KAVoB,CAArB;AAYAL,IAAAA,QAAQ,CAACG,YAAD,CAAR;AACH;;AACD,WAASK,QAAT,CAAkBN,EAAlB,EAAsBO,OAAtB,EAA+B;AAC3B,UAAMC,cAAc,GAAGX,KAAK,CAACK,GAAN,CAAUC,IAAI,IAAI;AACrC;AACA,UAAIH,EAAE,KAAKG,IAAI,CAACH,EAAhB,EAAoB;AAChB;AACA,eAAO,EAAC,GAAGG,IAAJ;AAAUM,UAAAA,IAAI,EAAEF;AAAhB,SAAP;AACH;;AACD,aAAOJ,IAAP;AACH,KAPsB,CAAvB;AAQAT,IAAAA,KAAK,CACJU,KADD,CACQ,cAAaJ,EAAG,GADxB,EAC4B;AAAC,cAAQO;AAAT,KAD5B;AAEAT,IAAAA,QAAQ,CAACU,cAAD,CAAR;AACH;;AAGD,WAASE,UAAT,CAAoBV,EAApB,EAAwB;AACpB,UAAMW,cAAc,GAAGd,KAAK,CAACe,MAAN,CAAaT,IAAI,IAAIH,EAAE,KAAKG,IAAI,CAACH,EAAjC,CAAvB;AACAF,IAAAA,QAAQ,CAACa,cAAD,CAAR;AACAjB,IAAAA,KAAK,CACAmB,MADL,CACa,cAAab,EAAG,GAD7B,EACiC;AAAC,YAAMA;AAAP,KADjC;AAEH;;AAIDH,EAAAA,KAAK,CAACiB,OAAN,CAAeC,IAAD,IAAU;AACpB,QAAIC,CAAC,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAR;AACAF,IAAAA,CAAC,CAACG,SAAF,GAAcJ,IAAd;AACAE,IAAAA,QAAQ,CAACG,aAAT,CAAuB,YAAvB,EAAqCC,WAArC,CAAiDL,CAAjD;AACH,GAJD;;AAOI,WAASM,OAAT,CAAiBb,IAAjB,EAAuB;AACnB,UAAMc,OAAO,GAAG;AAACvB,MAAAA,EAAE,EAAEwB,IAAI,CAACC,GAAL,EAAL;AAAiBhB,MAAAA,IAAI,EAAEA,IAAvB;AAA6BJ,MAAAA,SAAS,EAAE;AAAxC,KAAhB;AACAP,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW0B,OAAX,CAAD,CAAR;AACA7B,IAAAA,KAAK,CACAgC,IADL,CACU,aADV,EACyB;AAAC,YAAMH,OAAO,CAACvB,EAAf;AAAmB,cAAQuB,OAAO,CAACd,IAAnC;AAAyC,mBAAac,OAAO,CAAClB;AAA9D,KADzB;AAIH;AACJ;;GA5DIV,G;;KAAAA,G;AA+DL,eAAeA,GAAf","sourcesContent":["import Form from \"./form\";\nimport Todo from \"./todo\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\n\n\n\n\n\nfunction App(props) {\n\n\n    const [tasks, setTasks] = useState(props.tasks);\n\n\n    function toggleTaskCompleted(id) {\n        const updatedTasks = tasks.map(task => {\n            // if this task has the same ID as the edited task\n            if (id === task.id) {\n                // use object spread to make a new object\n                // whose `completed` prop has been inverted\n                axios\n                    .patch(`/api/todos/${id}/`, {\"completed\": !task.completed})\n                return {...task, completed: !task.completed}\n            }\n            return task;\n        });\n\n        setTasks(updatedTasks);\n    }\n    function editTask(id, newName) {\n        const editedTaskList = tasks.map(task => {\n            // if this task has the same ID as the edited task\n            if (id === task.id) {\n                //\n                return {...task, name: newName}\n            }\n            return task;\n        });\n        axios\n        .patch(`/api/todos/${id}/`, {\"name\": newName})\n        setTasks(editedTaskList);\n    }\n\n\n    function deleteTask(id) {\n        const remainingTasks = tasks.filter(task => id !== task.id);\n        setTasks(remainingTasks);\n        axios\n            .delete(`/api/todos/${id}/`, {\"id\": id})\n    }\n\n\n\n    tasks.forEach((item) => {\n        let p = document.createElement('p');\n        p.innerText = item;\n        document.querySelector('#item-list').appendChild(p);\n    });\n\n\n        function addTask(name) {\n            const newTask = {id: Date.now(), name: name, completed: false};\n            setTasks([...tasks, newTask]);\n            axios\n                .post(\"/api/todos/\", {\"id\": newTask.id, \"name\": newTask.name, \"completed\": newTask.completed})\n\n\n        }\n    }\n\n\n    export default App;\n"]},"metadata":{},"sourceType":"module"}