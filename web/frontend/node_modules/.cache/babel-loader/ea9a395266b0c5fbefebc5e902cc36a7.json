{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juanc\\\\WebstormProjects\\\\test\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Form from \"./form\";\nimport Todo from \"./todo\";\nimport React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  const taskList = tasks.map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this));\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: \"3 tasks remaining\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"pjFsLTHS1Kjd+NDyC2kZTexpLic=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/juanc/WebstormProjects/test/src/App.js"],"names":["Form","Todo","React","useState","nanoid","App","props","tasks","setTasks","toggleTaskCompleted","id","updatedTasks","map","task","completed","editTask","newName","editedTaskList","name","deleteTask","remainingTasks","filter","taskList","addTask","newTask"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,QAAvB;;;AAIA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACG,KAAK,CAACC,KAAP,CAAlC;;AAEA,WAASE,mBAAT,CAA6BC,EAA7B,EAAiC;AAC7B,UAAMC,YAAY,GAAGJ,KAAK,CAACK,GAAN,CAAUC,IAAI,IAAI;AACnC;AACA,UAAIH,EAAE,KAAKG,IAAI,CAACH,EAAhB,EAAoB;AAChB;AACA;AACA,eAAO,EAAC,GAAGG,IAAJ;AAAUC,UAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAA3B,SAAP;AACH;;AACD,aAAOD,IAAP;AACH,KARoB,CAArB;AASAL,IAAAA,QAAQ,CAACG,YAAD,CAAR;AACH;;AACD,WAASI,QAAT,CAAkBL,EAAlB,EAAsBM,OAAtB,EAA+B;AAC3B,UAAMC,cAAc,GAAGV,KAAK,CAACK,GAAN,CAAUC,IAAI,IAAI;AACrC;AACA,UAAIH,EAAE,KAAKG,IAAI,CAACH,EAAhB,EAAoB;AAChB;AACA,eAAO,EAAC,GAAGG,IAAJ;AAAUK,UAAAA,IAAI,EAAEF;AAAhB,SAAP;AACH;;AACD,aAAOH,IAAP;AACH,KAPsB,CAAvB;AAQAL,IAAAA,QAAQ,CAACS,cAAD,CAAR;AACH;;AAGD,WAASE,UAAT,CAAoBT,EAApB,EAAwB;AACpB,UAAMU,cAAc,GAAGb,KAAK,CAACc,MAAN,CAAaR,IAAI,IAAIH,EAAE,KAAKG,IAAI,CAACH,EAAjC,CAAvB;AACAF,IAAAA,QAAQ,CAACY,cAAD,CAAR;AACH;;AAID,QAAME,QAAQ,GAAGf,KAAK,CAACK,GAAN,CAAUC,IAAI,iBAC3B,QAAC,IAAD;AACI,IAAA,EAAE,EAAEA,IAAI,CAACH,EADb;AAEI,IAAA,IAAI,EAAEG,IAAI,CAACK,IAFf;AAGI,IAAA,SAAS,EAAEL,IAAI,CAACC,SAHpB;AAKI,IAAA,mBAAmB,EAAEL,mBALzB;AAMI,IAAA,UAAU,EAAEU,UANhB;AAOI,IAAA,QAAQ,EAAEJ;AAPd,KAISF,IAAI,CAACH,EAJd;AAAA;AAAA;AAAA;AAAA,UADa,CAAjB;;AAeA,WAASa,OAAT,CAAiBL,IAAjB,EAAuB;AACnB,UAAMM,OAAO,GAAG;AAAEd,MAAAA,EAAE,EAAE,UAAUN,MAAM,EAAtB;AAA0Bc,MAAAA,IAAI,EAAEA,IAAhC;AAAsCJ,MAAAA,SAAS,EAAE;AAAjD,KAAhB;AACAN,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWiB,OAAX,CAAD,CAAR;AACH;;AAGD,sBACI;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AAAM,MAAA,OAAO,EAAED;AAAf;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII;AAAI,MAAA,EAAE,EAAC,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,SAAS,EAAC,uCAFd;AAGI,yBAAgB,cAHpB;AAAA,gBAKKD;AALL;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAvEQjB,G;;KAAAA,G;AAyET,eAAeA,GAAf","sourcesContent":["import Form from \"./form\";\nimport Todo from \"./todo\";\nimport React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\n\n\n\nfunction App(props) {\n    const [tasks, setTasks] = useState(props.tasks);\n\n    function toggleTaskCompleted(id) {\n        const updatedTasks = tasks.map(task => {\n            // if this task has the same ID as the edited task\n            if (id === task.id) {\n                // use object spread to make a new object\n                // whose `completed` prop has been inverted\n                return {...task, completed: !task.completed}\n            }\n            return task;\n        });\n        setTasks(updatedTasks);\n    }\n    function editTask(id, newName) {\n        const editedTaskList = tasks.map(task => {\n            // if this task has the same ID as the edited task\n            if (id === task.id) {\n                //\n                return {...task, name: newName}\n            }\n            return task;\n        });\n        setTasks(editedTaskList);\n    }\n\n\n    function deleteTask(id) {\n        const remainingTasks = tasks.filter(task => id !== task.id);\n        setTasks(remainingTasks);\n    }\n\n\n\n    const taskList = tasks.map(task => (\n        <Todo\n            id={task.id}\n            name={task.name}\n            completed={task.completed}\n            key={task.id}\n            toggleTaskCompleted={toggleTaskCompleted}\n            deleteTask={deleteTask}\n            editTask={editTask}\n        />\n    ));\n\n\n\n\n    function addTask(name) {\n        const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n        setTasks([...tasks, newTask]);\n    }\n\n\n    return (\n        <div className=\"todoapp stack-large\">\n            <h1>TodoMatic</h1>\n            <Form addTask={addTask} />\n            \n            <h2 id=\"list-heading\">3 tasks remaining</h2>\n            <ul\n                role=\"list\"\n                className=\"todo-list stack-large stack-exception\"\n                aria-labelledby=\"list-heading\"\n            >\n                {taskList}\n            </ul>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}